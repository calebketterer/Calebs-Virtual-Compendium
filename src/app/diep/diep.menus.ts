// Define an interface to enforce which game state variables are required for drawing the menus.
interface MenuState {
Â  ctx: CanvasRenderingContext2D;
Â  width: number;
Â  height: number;
Â  isGameStarted: boolean; // <-- NEW: State to determine if the game is active or still on the start screen
Â  gameOver: boolean;
Â  isPaused: boolean;
Â  score: number;
Â  isDarkMode: boolean;
Â  deathAnimationTimeStart: number | null;
}

/**
Â * Utility class containing all methods responsible for drawing
Â * UI elements, menus, and overlays onto the canvas context.
Â */
export class DiepMenus {

Â  /**
Â  Â * Draws the Start Menu overlay screen, including the game title and the START button.
Â  Â * @param state The current game state and canvas context.
Â  Â */
Â  public static drawStartMenu(state: MenuState): void {
Â  Â  const { ctx, width, height, isGameStarted } = state;

Â  Â  // Only draw if the game has not started
Â  Â  if (!isGameStarted) {
Â  Â  Â  ctx.fillStyle = 'rgba(0, 0, 0, 0.9)'; // Dark overlay
Â  Â  Â  ctx.fillRect(0, 0, width, height);

Â  Â  Â  // Game Title
Â  Â  Â  ctx.font = 'bold 80px Inter, sans-serif';
Â  Â  Â  ctx.fillStyle = '#3498db'; // Blue color for the main title
Â  Â  Â  ctx.textAlign = 'center';
Â  Â  Â  ctx.fillText('Diep Singleplayer', width / 2, height / 2 - 120);

Â  Â  Â  // Instructions/Motto
Â  Â  Â  ctx.font = 'italic bold 20px Inter, sans-serif';
Â  Â  Â  ctx.fillStyle = '#bdc3c7'; // Light grey secondary text
Â  Â  Â  ctx.fillText('Shape Warfare: Destroy Shapes, Dodge Enemies, Dominate', width / 2, height / 2 - 60);

Â  Â  Â  // Draw START Button
Â  Â  Â  const btnW = 200;
Â  Â  Â  const btnH = 55;
Â  Â  Â  const btnX = width / 2 - (btnW / 2);
Â  Â  Â  const btnY = height / 2 + 20;

Â  Â  Â  ctx.fillStyle = '#2ecc71'; // Green color for the button
Â  Â  Â  ctx.fillRect(btnX, btnY, btnW, btnH);

Â  Â  Â  ctx.strokeStyle = '#27ae60'; // Darker green border
Â  Â  Â  ctx.lineWidth = 4;
Â  Â  Â  ctx.strokeRect(btnX, btnY, btnW, btnH);

Â  Â  Â  ctx.font = 'bold 30px Inter, sans-serif';
Â  Â  Â  ctx.fillStyle = '#fff';
Â  Â  Â  ctx.fillText('START', width / 2, btnY + 37);

Â  Â  Â  // Small Hint
Â  Â  Â  ctx.font = '16px Inter, sans-serif';
Â  Â  Â  ctx.fillStyle = '#7f8c8d';
Â  Â  Â  ctx.fillText('Use WASD to move and Mouse to aim.', width / 2, height / 2 + 120);
Â  Â  }
Â  }

Â  /**
Â  Â * Draws the Game Over overlay screen, including the final score and the Replay button.
Â  Â */
Â  public static drawGameOverScreen(state: MenuState): void {
Â  Â  // Note: isGameStarted is not destructured here but is part of the state for consistency
Â  Â  const { ctx, width, height, gameOver, deathAnimationTimeStart, score } = state;

Â  Â  // Only draw if the game is over and the death animation has finished/not started
Â  Â  if (gameOver && deathAnimationTimeStart === null) {
Â  Â  Â  ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
Â  Â  Â  ctx.fillRect(0, 0, width, height);

Â  Â  Â  ctx.font = 'bold 64px Inter, sans-serif';
Â  Â  Â  ctx.fillStyle = '#f1c40f';
Â  Â  Â  ctx.textAlign = 'center';
Â  Â  Â  ctx.fillText('GAME OVER', width / 2, height / 2 - 40);

Â  Â  Â  ctx.font = '32px Inter, sans-serif';
Â  Â  Â  ctx.fillStyle = '#ecf0f1';
Â  Â  Â  ctx.fillText('Final Score: ' + score, width / 2, height / 2 + 10);

Â  Â  Â  // Draw Replay Button
Â  Â  Â  const btnX = width / 2 - 80;
Â  Â  Â  const btnY = height / 2 + 60;
Â  Â  Â  const btnW = 160;
Â  Â  Â  const btnH = 45;

Â  Â  Â  ctx.fillStyle = '#e74c3c';
Â  Â  Â  ctx.fillRect(btnX, btnY, btnW, btnH);

Â  Â  Â  ctx.strokeStyle = '#c0392b';
Â  Â  Â  ctx.lineWidth = 3;
Â  Â  Â  ctx.strokeRect(btnX, btnY, btnW, btnH);

Â  Â  Â  ctx.font = 'bold 24px Inter, sans-serif';
Â  Â  Â  ctx.fillStyle = '#fff';
Â  Â  Â  ctx.fillText('REPLAY', width / 2, btnY + 30);
Â  Â  }
Â  }

Â  /**
Â  Â * Draws the Pause Menu overlay, including the RESUME and Dark Mode Toggle buttons.
Â  Â */
Â  public static drawPauseScreen(state: MenuState): void {
Â  Â  // Note: isGameStarted is not destructured here but is part of the state for consistency
Â  Â  const { ctx, width, height, isPaused, isDarkMode } = state;

Â  Â  if (isPaused) {
Â  Â  Â  ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
Â  Â  Â  ctx.fillRect(0, 0, width, height);

Â  Â  Â  ctx.font = 'bold 64px Inter, sans-serif';
Â  Â  Â  ctx.fillStyle = '#f39c12';
Â  Â  Â  ctx.textAlign = 'center';
Â  Â  Â  ctx.fillText('PAUSED', width / 2, height / 2 - 100);

Â  Â  Â  // Draw RESUME Button (Center)
Â  Â  Â  const playBtnX = width / 2 - 80;
Â  Â  Â  const playBtnY = height / 2 - 40;
Â  Â  Â  const playBtnW = 160;
Â  Â  Â  const playBtnH = 45;

Â  Â  Â  ctx.fillStyle = '#2ecc71';
Â  Â  Â  ctx.fillRect(playBtnX, playBtnY, playBtnW, playBtnH);
Â  Â  Â  ctx.font = 'bold 24px Inter, sans-serif';
Â  Â  Â  ctx.fillStyle = '#fff';
Â  Â  Â  ctx.fillText('RESUME', width / 2, playBtnY + 30);

Â  Â  Â  // Draw Dark Mode Toggle Button (Below Resume)
Â  Â  Â  const toggleBtnW = 280; // Increased width for text
Â  Â  Â  const toggleBtnX = width / 2 - (toggleBtnW / 2); // Center it
Â  Â  Â  const toggleBtnY = height / 2 + 40;
Â  Â  Â  const toggleBtnH = 45;

Â  Â  Â  ctx.fillStyle = isDarkMode ? '#34495e' : '#ecf0f1'; // Color based on target mode
Â  Â  Â  ctx.fillRect(toggleBtnX, toggleBtnY, toggleBtnW, toggleBtnH);
Â  Â  Â  ctx.strokeStyle = '#fff';
Â  Â  Â  ctx.lineWidth = 2;
Â  Â  Â  ctx.strokeRect(toggleBtnX, toggleBtnY, toggleBtnW, toggleBtnH);

Â  Â  Â  ctx.font = 'bold 18px Inter, sans-serif'; // Reduced font size
Â  Â  Â  ctx.fillStyle = isDarkMode ? '#ecf0f1' : '#333'; // Text color

Â  Â  Â  // Updated text for clarity
Â  Â  Â  const toggleText = isDarkMode ? 'CLICK FOR LIGHT MODE ðŸŒž' : 'CLICK FOR DARK MODE ðŸŒ™';
Â  Â  Â  ctx.fillText(toggleText, width / 2, toggleBtnY + 30);
Â  Â  }
Â  }

Â  /**
Â  Â * Draws the small in-game Pause/Play button at the top center.
Â  Â */
Â  public static drawInGamePauseButton(state: MenuState): void {
Â  Â  const { ctx, width, gameOver, isPaused, isGameStarted } = state;

Â  Â  // Only draw the button if the game is NOT over AND the game has started
Â  Â  if (!gameOver && isGameStarted) {
Â  Â  Â  const btnRadius = 20;
Â  Â  Â  const btnX = width / 2; // Center
Â  Â  Â  const btnY = 35; // Top center

Â  Â  Â  ctx.fillStyle = 'rgba(52, 152, 219, 0.9)'; // Blue background
Â  Â  Â  ctx.beginPath();
Â  Â  Â  ctx.arc(btnX, btnY, btnRadius, 0, Math.PI * 2);
Â  Â  Â  ctx.fill();

Â  Â  Â  ctx.fillStyle = '#fff';
Â  Â  Â  if (isPaused) {
Â  Â  Â  Â  // Draw Play icon (Triangle)
Â  Â  Â  Â  ctx.beginPath();
Â  Â  Â  Â  ctx.moveTo(btnX - 5, btnY - 8);
Â  Â  Â  Â  ctx.lineTo(btnX - 5, btnY + 8);
Â  Â  Â  Â  ctx.lineTo(btnX + 7, btnY);
Â  Â  Â  Â  ctx.closePath();
Â  Â  Â  Â  ctx.fill();
Â  Â  Â  } else {
Â  Â  Â  Â  // Draw Pause icon (two vertical lines)
Â  Â  Â  Â  ctx.fillRect(btnX - 6, btnY - 8, 4, 16);
Â  Â  Â  Â  ctx.fillRect(btnX + 2, btnY - 8, 4, 16);
Â  Â  Â  }

Â  Â  Â  // Add a border when paused to make it stand out against the dark overlay
Â  Â  Â  if (isPaused) {
Â  Â  Â  Â  ctx.strokeStyle = '#fff';
Â  Â  Â  Â  ctx.lineWidth = 2;
Â  Â  Â  Â  ctx.stroke();
Â  Â  Â  }
Â  Â  }
Â  }
}
